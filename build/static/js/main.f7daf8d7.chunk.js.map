{"version":3,"sources":["Pages/login.js","Pages/home.js","Pages/Stock.js","index.js"],"names":["Log_in","useState","username","setUsername","password","setPassword","loginStatus","setLoginStatus","usernameTextIDs","passwordTextIDs","React","anchorEl","setAnchorEl","open","Boolean","handleClose","history","useHistory","Axios","defaults","withCredentials","className","AppBar","position","Toolbar","style","justifyContent","display","Hidden","xsDown","ButtonGroup","color","variant","aria-label","Button","onClick","push","Menu","id","anchorOrigin","vertical","horizontal","onClose","MenuItem","smUp","IconButton","aria-controls","aria-haspopup","event","currentTarget","Grid","container","direction","alignItems","spacing","item","xs","Card","maxWidth","minWidth","margin","TextField","label","onChange","e","target","value","type","post","headers","then","response","data","auth","localStorage","setItem","token","Home","WWMtotal","setWWMTotal","WWFtotal","setWWFTotal","WBMtotal","setWBMTotal","WBFtotal","setWBFTotal","Troutotal","setTrouTotal","Skitotal","setSkiTotal","Slatotal","setSlaTotal","TieStotal","setTieSTotal","TieLtotal","setTieLTotal","Bertotal","setBerTotal","WWMstores","setWWMStores","WWFstores","setWWFStores","WBMstores","setWBMStores","WBFstores","setWBFStores","Troustores","setTrouStores","Skistores","setSkiStores","Slastores","setSlaStores","TieSstores","setTieSStores","TieLstores","setTieLStores","Berstores","setBerStores","setWWMSize","setWWFSize","setWBMSize","setWBFSize","setTrouSize","WWMissued","setWWMIssued","WWFissued","setWWFIssued","WBMissued","setWBMIssued","WBFissued","setWBFIssued","Trouissued","setTrouIssued","Skiissued","setSkiIssued","Slaissued","setSlaIssued","TieSissued","setTieSIssued","TieLissued","setTieLIssued","Bertissued","setBerIssued","useEffect","get","resp","console","log","TotalStock","StoresStock","IssuedStock","Sizes","handleMenu","useRowStyles","makeStyles","root","borderBottom","createData","name","stores","issued","total","details","Size","Stores","Row","props","row","classes","Fragment","TableRow","TableCell","component","scope","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","Typography","gutterBottom","Table","size","TableHead","TableBody","map","detailsRow","rows","TableContainer","Paper","Stock","setName","setSize","location","setLocation","newLocation","setNewLocation","itemList","setItemList","elevation","placeholder","val","key","Id","put","delete","filter","ReactDOM","render","exact","path","Login","document","getElementById"],"mappings":"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","file":"static/js/main.f7daf8d7.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\"; \nimport './App.css';\nimport Axios from \"axios\";\nimport 'fontsource-roboto';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { Grid, ButtonGroup, Card, Hidden} from \"@material-ui/core\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {Link, NavLink, Redirect, useHistory} from 'react-router-dom';\n//These import aspects of libraries for later use\n\nfunction Log_in() {\n  //This is the the start of the app and encompasses all other code for the react app\n \n  const [usernameReg, setUsernameReg] = useState('');\n  const [passwordReg, setPasswordReg] = useState('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [loginStatus, setLoginStatus] = useState(false);\n  const [usernameTextIDs] = useState('');\n  const [passwordTextIDs] = useState('');\n  //These are initialised variables for logging into the system\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const handleMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  //This is the variable and function for the icon button used later in the navigation. This is from the Material UI library - https://material-ui.com/\n  let history = useHistory();\n\n  Axios.defaults.withCredentials = true;\n\n  //const register = () => {\n    //Axios.post(\"https://rafacims-deploy.herokuapp.com/register\", {\n     // username: usernameReg,\n      //password: passwordReg,\n   // }).then((response) => {\n    //console.log(response.data);\n   // });\n  //};\n\n  //This is the Post request that allows new users to register, it is currently commented out as i do not want new account to be able to be registred however it may be needed in the future. \n\n  const login = () => {\n    Axios.post(\"https://rafacims-deploy.herokuapp.com/login\", {\n      headers:{\n        \"Access-Control-Allow-Origin\": true, \n      },\n      username: username,\n      password: password,\n    }).then((response) => {\n      if (!response.data.auth){\n        setLoginStatus(false);\n        return(\n          <h3>Incorrect username and/or password</h3>\n        )\n      } else {\n        localStorage.setItem(\"token\", response.data.token);\n        setLoginStatus(true); \n        history.push(\"/Pages/home\");\n      }\n  });\n  };\n\n  //This block is the Post request that sends the username and passwords entered to the databse to be compared against existing user accounts. It states that if the data does not match (is not auth) then to set login status to false, and display a message to the user, however i it come back as auth then the page creates a cookie and sets a JSON Web token so that the user can stay logged in. It also automatically redirects the user to the home page.   \n\n  const refresh = ()=>{\n    window.location.reload();\n  }\n  //This function is used to refresh the page after a new user has been registered - Note it is not currently in use as the regist function is dormant. \n\n  const userAuthenticated = () =>{\n    Axios.get(\"https://rafacims-deploy.herokuapp.com/isUserAuth\",{\n      headers: {\n        \"x-access-token\": localStorage.getItem(\"token\"),\n\n      }\n    }).then ((response)=>{\n      console.log(response);\n    });\n  };\n  //This function console logs the JSON web token to allow for checking that this function is working \n\n\n  return (\n\n    <div className=\"App\">\n\n     <AppBar position=\"static\">\n        <Toolbar \n        style={{\n          justifyContent: 'center',\n          display: \"inline-flex\",\n        }}\n        >\n          <Hidden xsDown>\n      \n          <ButtonGroup \n           color=\"inherit\"\n            variant=\"text\" \n            aria-label=\"text primary button group\">\n           <Button onClick={()=>{\n             if(loginStatus===true){\n               history.push(\"/Pages/home\")\n             }else{\n               history.push(\"/\")\n             }\n           }}>Home</Button>\n           </ButtonGroup>\n         \n          \n              <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                  vertical: 'top',\n                  horizontal: 'center',\n                }}\n                \n                open={open}\n                onClose={handleClose}\n              >\n                <MenuItem>LogIn</MenuItem>\n                \n              </Menu>\n              </Hidden>\n\n             <Hidden smUp>\n              <IconButton\n                aria-label=\"more\"\n                aria-controls=\"menu-appbar\"\n                aria-haspopup=\"true\"\n                onClick={handleMenu}\n                color=\"inherit\"\n              >\n                <MenuIcon />Menu\n              </IconButton>\n              <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                  vertical: 'top',\n                  horizontal: 'center',\n                }}\n                \n                open={open}\n                onClose={handleClose}\n              >\n                <MenuItem onClick={handleClose}>Home</MenuItem>\n                <MenuItem onClick={handleClose}>Log Out</MenuItem>\n  \n              </Menu>\n              </Hidden>\n              \n             \n          \n          \n        </Toolbar>\n      </AppBar>\n      {/* This long block of code is from https://material-ui.com/ and is the 'appbar' navigation bar, it uses the react router dom and the 'ProtectedRoutes.js' page to set the navigation buttons to go to the correct page and only allow if logged in. It also scales for the diferent size of browser window, switching to a 'burger' menu once the window is too small to accurately fit the text on.   */}\n\n      <Grid container\n        direction=\"column\"\n        alignItems=\"center\"\n        spacing={1} \n      >\n\n        <Grid item xs={3}>\n        <Card\n        style={\n          {\n           justifyContent: 'center',\n           display: 'inline-flex',\n           maxWidth: '300px',\n           minWidth: '190px',\n           margin: 10,\n          }\n        } \n        >\n\n        <div \n        className=\"login\" \n        style={\n          {\n           justifyContent: 'center',\n           display: 'inline-block',\n           margin: 12,}\n        \n        }>\n\n          {/*This is the start and styling of the card with the login form on */}\n          <h2>Login</h2>\n          <TextField id={usernameTextIDs} label=\"Username\" \n          onChange={(e) =>{\n          setUsername(e.target.value);\n        }}/>\n        {/*This textfield allows the user to type in their username and then sets the value of the 'setUsername' variable to whatever the user has typed*/}\n        \n        <TextField\n          id={passwordTextIDs}\n          label=\"Password\"\n          type=\"password\"\n          onChange={(e) => {\n            setPassword(e.target.value)\n          }}/>\n          {/*This textfield allows the user to type in their Password and then sets the value of the 'setPassword' variable to whatever the user has typed, it also has the 'type' as password so that it appears hiden rather than as plain text*/}\n          <br></br>\n        \n          <Button \n          variant=\"contained\" \n          color=\"primary\" \n          style={\n            {\n             justifyContent: 'center',\n             display: \"inline\",\n             margin: 12,}\n          \n          }\n          onClick={()=>{\n            login();\n            \n          \n          }}\n            >Login</Button>\n\n            {/*This button calls the login function */}\n          \n      </div>\n      </Card>\n      </Grid>\n      </Grid>\n     </div>\n  );\n        }\n\n\nexport default Log_in;\n//This is the final line and closes the app and exports for display on the front end. \n\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Axios from \"axios\";\nimport 'fontsource-roboto';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport {useHistory} from 'react-router-dom';\nimport { Grid, ButtonGroup, Card, Hidden} from \"@material-ui/core\";\n//These import aspects of libraries for later use \n\nfunction Home(){\n  //This is the the start of the app and encompasses all othe code for the react app\n\nconst [WWMtotal, setWWMTotal]=useState([])\nconst [WWFtotal, setWWFTotal]=useState([])\nconst [WBMtotal, setWBMTotal]=useState([])\nconst [WBFtotal, setWBFTotal]=useState([])\nconst [Troutotal, setTrouTotal]=useState([])\nconst [Skitotal, setSkiTotal]=useState([])\nconst [Slatotal, setSlaTotal]=useState([])\nconst [TieStotal, setTieSTotal]=useState([])\nconst [TieLtotal, setTieLTotal]=useState([])\nconst [Bertotal, setBerTotal]=useState([])\nconst [WWMstores, setWWMStores]=useState([])\nconst [WWFstores, setWWFStores]=useState([])\nconst [WBMstores, setWBMStores]=useState([])\nconst [WBFstores, setWBFStores]=useState([])\nconst [Troustores, setTrouStores]=useState([])\nconst [Skistores, setSkiStores]=useState([])\nconst [Slastores, setSlaStores]=useState([])\nconst [TieSstores, setTieSStores]=useState([])\nconst [TieLstores, setTieLStores]=useState([])\nconst [Berstores, setBerStores]=useState([])\nconst [WWMsize, setWWMSize]=useState([])\nconst [WWFsize, setWWFSize]=useState([])\nconst [WBMsize, setWBMSize]=useState([])\nconst [WBFsize, setWBFSize]=useState([])\nconst [Trousize, setTrouSize]=useState([])\nconst [Skisize, setSkiSize]=useState([])\nconst [Slasize, setSlaSize]=useState([])\nconst [TieSsize, setTieSSize]=useState([])\nconst [TieLsize, setTieLSize]=useState([])\nconst [Bertsize, setBerSize]=useState([])\nconst [WWMissued, setWWMIssued]=useState([])\nconst [WWFissued, setWWFIssued]=useState([])\nconst [WBMissued, setWBMIssued]=useState([])\nconst [WBFissued, setWBFIssued]=useState([])\nconst [Trouissued, setTrouIssued]=useState([])\nconst [Skiissued, setSkiIssued]=useState([])\nconst [Slaissued, setSlaIssued]=useState([])\nconst [TieSissued, setTieSIssued]=useState([])\nconst [TieLissued, setTieLIssued]=useState([])\nconst [Bertissued, setBerIssued]=useState([])\n\n//This is a list of variables that are set up to be used in the stock table\n\n\nuseEffect(()=>{\n  Axios.get(\"https://rafacims-deploy.herokuapp.com/Total\")\n  .then(resp=>{\n    console.log(resp)\n    setWWMTotal(resp.data[0].TotalStock)\n    setWWFTotal(resp.data[1].TotalStock)\n    setWBMTotal(resp.data[2].TotalStock)\n    setWBFTotal(resp.data[3].TotalStock)\n    setTrouTotal(resp.data[4].TotalStock)\n    setSkiTotal(resp.data[5].TotalStock)\n    setSlaTotal(resp.data[6].TotalStock)\n    setTieSTotal(resp.data[7].TotalStock)\n    setTieLTotal(resp.data[8].TotalStock)\n    setBerTotal(resp.data[9].TotalStock)\n  })\n},[])\n//This is a get request from front end to the server to get the information from the 'total' function, it sets the values of the variables earlier initialised to be the total for each item with the same name.\n\n\nuseEffect(()=>{\n  Axios.get(\"https://rafacims-deploy.herokuapp.com/Stores\")\n  .then(resp=>{\n    setWWMStores(resp.data[0].StoresStock)\n    setWWFStores(resp.data[1].StoresStock)\n    setWBMStores(resp.data[2].StoresStock)\n    setWBFStores(resp.data[3].StoresStock)\n    setTrouStores(resp.data[4].StoresStock)\n    setSkiStores(resp.data[5].StoresStock)\n    setSlaStores(resp.data[6].StoresStock)\n    setTieSStores(resp.data[7].StoresStock)\n    setTieLStores(resp.data[8].StoresStock)\n    setBerStores(resp.data[9].StoresStock)\n  })\n},[])\n//This is a get request from front end to the server to get the information from the 'Stores' function, it sets the values of the variables earlier initialised to be the total for each item that has teh location as 'stores' with the same name.\n\nuseEffect(()=>{\n  Axios.get(\"https://rafacims-deploy.herokuapp.com/Issued\")\n  .then(resp=>{\n    //console.log(resp)\n    setWWMIssued(resp.data[0].IssuedStock)\n    setWWFIssued(resp.data[1].IssuedStock)\n    setWBMIssued(resp.data[2].IssuedStock)\n    setWBFIssued(resp.data[3].IssuedStock)\n    setTrouIssued(resp.data[4].IssuedStock)\n    setSkiIssued(resp.data[5].IssuedStock)\n    setSlaIssued(resp.data[6].IssuedStock)\n    setTieSIssued(resp.data[7].IssuedStock)\n    setTieLIssued(resp.data[8].IssuedStock)\n    setBerIssued(resp.data[9].IssuedStock)\n  })\n},[])\n//This is a get request from front end to the server to get the information from the 'Issued' function, it sets the values of the variables earlier initialised to be the total of each item that is not in stores for each item with the same \n\nuseEffect(()=>{\n  Axios.get(\"https://rafacims-deploy.herokuapp.com/Sizes\")\n  .then(resp=>{\n    console.log(resp)\n    setWWMSize(resp.data[0].Sizes)\n    setWWFSize(resp.data[1].Sizes)\n    setWBMSize(resp.data[2].Sizes)\n    setWBFSize(resp.data[3].Sizes)\n    setTrouSize(resp.data[4].Sizes)\n    //setSkiSize(resp.data[5].Sizes)\n    //setSlaSize(resp.data[6].Sizes)\n    //setTieSSize(resp.data[7].Sizes)\n    //setTieLSize(resp.data[8].Sizes)\n    //setBerSize(resp.data[9].Sizes)\n  })\n},[])\n\n//This is a get request from front end to the server to get the information from the 'Sizes' function, it sets the values of the variables earlier initialised to be the total for each item with the same. This code is WIP as it is a future feature o teh home page havng more information about the stock level of specific sizes\n\nconst [loginStatus, setLoginStatus] = useState(true);\nlet history = useHistory();\nconst LogOut =()=>{\n  setLoginStatus(false);\n  history.push(\"/\");\n}\n\n//This block initialises variable and sets the login status for the home page as true, it also creates the function to logout which sets the status to false and bounces the page back to the login page.\n\nconst [anchorEl, setAnchorEl] = React.useState(null);\nconst open = Boolean(anchorEl);\nconst handleMenu = (event) => {\n  setAnchorEl(event.currentTarget);\n};\nconst handleClose = () => {\n  setAnchorEl(null);\n};\n//This is the variable and function for the icon button used later in the navigation. This is from the Material UI library - https://material-ui.com/\n\n\nconst useRowStyles = makeStyles({\n  root: {\n    '& > *': {\n      borderBottom: 'unset',\n    },\n  },\n});\n//this is code from Material UI for the styling of the table - https://material-ui.com/\n\n\n\n\n\nconst createData = (name, stores, issued, total )=>{\n  return {\n    name,\n    stores,\n    issued,\n    total,\n    details: [\n      { Size: '60/60/60', Stores: 43, issued: 3 , total: 46},\n    ],\n  };\n}\n\n//This code sets up the data that will be displayed in the table - originally from https://material-ui.com/ edited to fit this project. \n\n\nconst Row = (props)=>{\n  const { row } = props;\n  const [open, setOpen] = React.useState(false);\n  const classes = useRowStyles();\n\n  //Code from https://material-ui.com/ that creates the necessary settings for the rows, it also initialises the ablity to 'open' and 'close' which will be used in the future for the drop down sectin with specific size info.\n\n  return (\n    <React.Fragment>\n      <TableRow className={classes.root}>\n        <TableCell>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {row.name}\n        </TableCell>\n        <TableCell>{row.stores}</TableCell>\n        <TableCell>{row.issued}</TableCell>\n        <TableCell>{row.total}</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box margin={1}>\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\n                Details\n              </Typography>\n              <Table size=\"small\" aria-label=\"purchases\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Size:</TableCell>\n                    <TableCell>Stores:</TableCell>\n                    <TableCell>Issued:</TableCell>\n                    <TableCell>Total:</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {row.details.map((detailsRow) => (\n                    <TableRow key={detailsRow.Size}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {detailsRow.Size}\n                      </TableCell>\n                      <TableCell>{detailsRow.Stores}</TableCell>\n                      <TableCell>{detailsRow.issued}</TableCell>\n                      <TableCell>{detailsRow.total}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n\n\n\n}\n//This is a react fragment, used for returning multiple elements, that contains the table displayed on the home page. Using the 'Rows' function from before and the adding in some of the previously defined variables to populate the table. \n\nRow.propTypes = {\n  row: PropTypes.shape({\n    stores: PropTypes.number.isRequired,\n    issued: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    details: PropTypes.arrayOf(\n      PropTypes.shape({\n        Size: PropTypes.string.isRequired,\n        Stores: PropTypes.number.isRequired,\n        issued: PropTypes.number.isRequired,\n        total: PropTypes.number.isRequired,\n      }),\n    ).isRequired,\n    name: PropTypes.string.isRequired,\n  }).isRequired,\n};\n//Here the rows of the table are set up to get data from the variables and sets the data type to correspond to the correct data coming in from the database. \n\n\nconst rows = [\n  createData('Wedgewood Shirt (M)', WWMstores, WWMissued, WWMtotal),\n  createData('Wedgewood Shirt (F)', WWFstores, WWFissued, WWFtotal),\n  createData('Working Blue Shirt (M)', WBMstores, WBMissued, WBMtotal),\n  createData('Working Blue Shirt (F)', WBFstores, WBFissued, WBFtotal),\n  createData('Trousers', Troustores, Trouissued, Troutotal),\n  createData('Skirt', Skistores, Skiissued, Skitotal), \n  createData('Slacks', Slastores, Slaissued, Slatotal),\n  createData('Tie (Short)', TieSstores, TieSissued, TieStotal), \n  createData('Tie (Long)', TieLstores, TieLissued ,TieLtotal), \n  createData('Beret', Berstores, Bertissued, Bertotal),\n];\n//This section sets the name of each row and the data displayed for each row to be the variables defined before as the information from the SQL queries by the server. \n\n  return (\n    <div className=\"App\">\n\n      <AppBar position=\"static\">\n         <Toolbar \n         style={{\n           justifyContent: 'center',\n           display: \"inline-flex\",\n         }}>\n           <Hidden xsDown>\n           <ButtonGroup \n           color=\"inherit\"\n            variant=\"text\" \n            aria-label=\"text primary button group\">\n           <Button onClick={()=>{\n             if(loginStatus===true){\n               history.push(\"/Pages/home\")\n             }else{\n               history.push(\"/\")\n             }\n           }}>Home</Button>\n           <Button onClick={()=>{\n             if(loginStatus===true){\n               history.push(\"/Pages/Stock\")\n             }else{\n               history.push(\"/\")\n             }\n           }}>Add items</Button>\n           </ButtonGroup>\n           <IconButton\n                 aria-label=\"account of current user\"\n                 aria-controls=\"menu-appbar\"\n                 aria-haspopup=\"true\"\n                 onClick={handleMenu}\n                 color=\"inherit\"\n               >\n                 <AccountCircle />\n               </IconButton>\n               <Menu\n                 id=\"menu-appbar\"\n                 anchorEl={anchorEl}\n                 anchorOrigin={{\n                   vertical: 'top',\n                   horizontal: 'center',\n                 }}\n                 open={open}\n                 onClose={handleClose}\n               >\n                 <MenuItem onClick={()=>{LogOut();}}>Logout</MenuItem>\n               </Menu>\n               </Hidden>\n              <Hidden smUp>\n               <IconButton\n                 aria-label=\"more\"\n                 aria-controls=\"menu-appbar\"\n                 aria-haspopup=\"true\"\n                 onClick={handleMenu}\n                 color=\"inherit\"\n               >\n                 <MenuIcon />Menu\n               </IconButton>\n               <Menu\n                 id=\"menu-appbar\"\n                 anchorEl={anchorEl}\n                 anchorOrigin={{\n                   vertical: 'top',\n                   horizontal: 'center',\n                 }}\n                 \n                 open={open}\n                 onClose={handleClose}\n               >\n                 <MenuItem onClick={()=>{\n             if(loginStatus===true){\n               history.push(\"/Pages/home\")\n             }else{\n               history.push(\"/\")\n             }\n           }}>Home</MenuItem>\n               </Menu>\n               </Hidden>\n         </Toolbar>\n       </AppBar>\n{/* This long block of code is from https://material-ui.com/ and is the 'appbar' navigation bar, it uses the react router dom and the 'ProtectedRoutes.js' page to set the navigation buttons to go to the correct page and only allow if logged in. It also scales for the diferent size of browser window, switching to a 'burger' menu once the window is too small to accurately fit the text on.   */}\n       <h1>Welcome Back!</h1>\n       <h3>Here's an overview of the current stock</h3>\n\n      {/* These are heading text that will appear on the screen.*/}\n       <Card>\n    <TableContainer component={Paper}>\n      <Table aria-label=\"collapsible table\">\n        <TableHead>\n          <TableRow>\n            <TableCell />\n            <TableCell>Name:</TableCell>\n            <TableCell>In Stores:</TableCell>\n            <TableCell>Issued:</TableCell>\n            <TableCell>Total:</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <Row key={row.name} row={row} />\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n    </Card>\n    </div>\n  );\n};\n{/* This is simply the final stage of displaying the table, using the other code block from earlier. It sets the headings for the table and the info to be pulled from previous code block. Again sourced from https://material-ui.com/ and edited to suit the project */}\nexport default Home;\n//This is the final line and closes the app and exports for display on the front end. \n","import React, {useState} from \"react\"; \nimport './App.css';\nimport Axios from \"axios\";\nimport 'fontsource-roboto';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { Grid, ButtonGroup, Card, Hidden, Paper, GridList} from \"@material-ui/core\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {useHistory} from 'react-router-dom';\n//These import aspects of libraries for later use \n\n\n\nfunction Stock() {  \n  const [name, setName] = useState(\"\");\n  const [size, setSize] = useState(0);\n  const [location, setLocation] = useState(0);\n  const [newLocation, setNewLocation] = useState(0);\n  const [itemList, setItemList] = useState([]);\n\n  //These variables are being initialised now for later use with the form to add items to the database.\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const handleMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  //This is the variable and function for the icon button used later in the navigation. This is from the Material UI library - https://material-ui.com/\n\n  const [loginStatus, setLoginStatus] = useState(true);\n  let history = useHistory();\n  const LogOut =()=>{\n    setLoginStatus(false);\n    history.push(\"/\");\n  }\n\n  //This block initialises variable and sets the login status for the home page as true, it also creates the function to logout which sets the status to false and bounces the page back to the login page.\n\n  const addItem = () => {\n    Axios.post(\"https://rafacims-deploy.herokuapp.com/create\", {\n      name: name,\n      size: size,\n      location: location,\n    }).then(() => {\n      setItemList([\n        ...itemList,\n        {\n          name: name,\n          size: size,\n          location: location,\n        },\n      ]);\n    });\n  };\n\n  //This is a Post request that sends the information from the form through the server to add in item to the database. \n\n  const getItem = () => {\n    Axios.get(\"https://rafacims-deploy.herokuapp.com/items\").then((response) => {\n      setItemList(response.data);\n    });\n  };\n\n  //This Get request brings up all the items in the database\n\n  const updateItemLocation = (Id) => {\n    Axios.put(\"https://rafacims-deploy.herokuapp.com/update\", { location: newLocation, id: Id }).then(\n      (response) => {\n        setItemList(\n          itemList.map((val) => {\n            return val.id === Id\n              ? {\n                  id: val.id,\n                  name: val.name,\n                  size: val.size,\n                  location: newLocation,\n                }\n              : val;\n          })\n        );\n      }\n    );\n  };\n\n  //This Put request changes the vale in the database one column of the item, in this case the location\n\n  const deleteItem = (Id) => {\n    Axios.delete(`https://rafacims-deploy.herokuapp.com/delete/:id`).then((response) => {\n      setItemList(\n        itemList.filter((val) => {\n          return val.id !== Id;\n        })\n      );\n    });\n  };\n  //This allows the user to delete items from the database\n  \n     return (\n      <div className=\"App\">\n\n      <AppBar position=\"static\">\n         <Toolbar \n         style={{\n           justifyContent: 'center',\n           display: \"inline-flex\",\n         }}\n         >\n           <Hidden xsDown>\n       \n           <ButtonGroup \n           color=\"inherit\"\n            variant=\"text\" \n            aria-label=\"text primary button group\">\n           <Button onClick={()=>{\n             if(loginStatus===true){\n               history.push(\"/Pages/home\")\n             }else{\n               history.push(\"/\")\n             }\n           }}>Home</Button>\n           \n        \n           </ButtonGroup>\n          \n           <IconButton\n                 aria-label=\"account of current user\"\n                 aria-controls=\"menu-appbar\"\n                 aria-haspopup=\"true\"\n                 onClick={handleMenu}\n                 color=\"inherit\"\n               >\n                 <AccountCircle />\n               </IconButton>\n               <Menu\n                 id=\"menu-appbar\"\n                 anchorEl={anchorEl}\n                 anchorOrigin={{\n                   vertical: 'top',\n                   horizontal: 'center',\n                 }}\n                 \n                 open={open}\n                 onClose={handleClose}\n               >\n                 <MenuItem onClick={()=>{LogOut();}}>Logout</MenuItem>\n               </Menu>\n               </Hidden>\n \n              <Hidden smUp>\n               <IconButton\n                 aria-label=\"more\"\n                 aria-controls=\"menu-appbar\"\n                 aria-haspopup=\"true\"\n                 onClick={handleMenu}\n                 color=\"inherit\"\n               >\n                 <MenuIcon />Menu\n               </IconButton>\n               <Menu\n                 id=\"menu-appbar\"\n                 anchorEl={anchorEl}\n                 anchorOrigin={{\n                   vertical: 'top',\n                   horizontal: 'center',\n                 }}\n                 \n                 open={open}\n                 onClose={handleClose}\n               >\n                 <MenuItem onClick={()=>{\n             if(loginStatus===true){\n               history.push(\"/Pages/home\")\n             }else{\n               history.push(\"/\")\n             }\n           }}>Home</MenuItem>\n                 <MenuItem onClick={()=>{\n             if(loginStatus===true){\n               history.push(\"/Pages/cadets\")\n             }else{\n               history.push(\"/\")\n             }\n           }}>Cadets</MenuItem>\n                 <MenuItem onClick={()=>{\n             if(loginStatus===true){\n               history.push(\"/Pages/stock\")\n             }else{\n               history.push(\"/\")\n             }\n           }}>Stock Management</MenuItem>\n                 <MenuItem onClick={()=>{\n             if(loginStatus===true){\n               history.push(\"/Pages/staff\")\n             }else{\n               history.push(\"/\")\n             }\n           }}>Staff Accounts</MenuItem>\n               </Menu>\n               </Hidden>\n               \n              \n           \n           \n         </Toolbar>\n       </AppBar>\n       {/* This long block of code is from https://material-ui.com/ and is the 'appbar' navigation bar, it uses the react router dom and the 'ProtectedRoutes.js' page to set the navigation buttons to go to the correct page and only allow if logged in. It also scales for the diferent size of browser window, switching to a 'burger' menu once the window is too small to accurately fit the text on.   */}\n\n       <h1>Add an item here!</h1>\n       <h5>Warning: For this initial version the show items button will show every item in the database individually. For an overview of how many of each item please visit the home page</h5>\n      {/*This is the text that will be displayed at the top of the page, just below the navigation */} \n       \n       <div className=\"information\">\n       <Grid container\n        direction=\"column\"\n        alignItems=\"center\"\n        spacing={1} \n      >\n        <Paper elevation={3}>\n          <h3>Add an Item</h3>\n        <Grid item xs={12}>\n        <TextField\n          id=\"filled-basic\"\n          style={{ margin: 18 }}\n          label=\"Item Name\"\n          placeholder=\"Item Name...\"\n          margin=\"normal\"\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n        />\n        {/* This sets the name of the new item in the database to be whatever the user types into the text box*/}\n        </Grid>\n        <Grid item xs={12}>\n        <TextField\n        id=\"filled-text\"\n        style={{ margin: 18 }}\n        label=\"Size\"\n        type=\"text\"\n          onChange={(event) => {\n            setSize(event.target.value);\n          }}\n        />\n        </Grid>\n         {/* This sets the Size of the new item in the database to be whatever the user types into the text box*/}\n        \n        <Grid item xs={12}>\n        <TextField\n          label=\"Location\"\n          style={{ margin: 18 }}\n          type=\"Text\"\n          onChange={(event) => {\n            setLocation(event.target.value);\n          }}\n        /></Grid>\n        {/* This sets the Location of the new item in the database to be whatever the user types into the text box */}\n        <Button \n        variant=\"contained\" \n          color=\"primary\" \n          style={\n            {\n             justifyContent: 'center',\n             display: \"inline\",\n             margin: 12,}\n          \n          } onClick={addItem}>Add item</Button>\n        {/* This calls the 'addItem' function when the button is pressed*/}\n        <Button\n        variant=\"contained\" \n        color=\"primary\" \n        style={\n          {\n           justifyContent: 'center',\n           display: \"inline\",\n           margin: 12,}\n        \n        } onClick={getItem}>Show all items</Button>\n        {/* This calls the 'getItem' function when the button is pressed */}\n        </Paper>\n        </Grid>\n\n        {itemList.map((val, key) => {\n          return (\n            <div className=\"items\">\n              <Card>\n                <h2>Name: {val.name}</h2></Card><Card><h2>Size: {val.size}</h2>\n                </Card>\n                <Card>\n                <h2>Location: {val.location}</h2>\n                </Card>\n\n               <Card>\n                    {/* This displays all items in the database and sets headngs for the data*/}\n              <div>\n                <TextField\n                  type=\"text\"\n                  placeholder=\"Name of cadet issued to....\"\n                  onChange={(event) => {\n                    setNewLocation(event.target.value);\n                  }}\n                />\n                 {/* This sets the new location of the item in the database to be whatever the user types into the text box*/}\n                <Button\n                  onClick={() => {\n                    updateItemLocation(val.id);\n                  }}\n                >\n                  {\" \"}\n                  Update\n                </Button>\n                 {/* This calls the 'updateItemLocation function when pressed*/}\n\n                <Button\n                  onClick={() => {\n                    deleteItem(val.id);\n                  }}\n                >\n                  Delete\n                </Button>\n                {/* This calls the 'deleteItem' function when pressed */}\n\n              </div>\n              </Card>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n       \n     );\n\n }\n\n\n export default Stock;\n //This is the final line and closes the app and exports for display on the front end. ","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Login from \"./Pages/login\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from \"./Pages/home\";\nimport Stock from \"./Pages/Stock\";\n\nReactDOM.render(\n    <Router>\n        <Switch>\n            <Route exact path=\"/\" component={Login}/>,\n            <Route exact path=\"/Pages/home\" component={Home}/>,\n            <Route exact path=\"/Pages/Stock\" component={Stock}/>,\n        </Switch>\n    </Router>,\n\n  document.getElementById('root')\n);\n"],"sourceRoot":""}